Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-03-13T10:51:58+08:00

====== 星期三 13 3月 2019 ======

modbus_tcpslave.py  实现一个命行行、交互式的modbus tcp slave的模拟
用法：

1  python modbus_tcpslave.py 进入命令行交互状态

2. 输入 指令 

		quit 为终止程序退出
        
		模拟产生数据时，需要录入 5个参数，参数之间用空格隔开

	   从左到右，第一个参数指明要做什么事，即命令  ，有如下可选项

			   add_slave             ：  新添加一个从设备
			   add_block             :  添加块？
				set_values          :  写值
				get_values        :   读值

	  从第2个参数至后面，根据第一个参数所指的命令不同，后面参数数量不一样，这些参数表示第一个参数命令的 子参数 具体如下：
         
			   add_slave    {slave_id}             slave_id :从设备编号


			   add_block    {slave_id}   { name }     {block_type}   {starting_address}   { length}
									block_type :  内存块类型
									name : 块名称
									starting_address :  开始地址
									length : 长度

			  set_values  {slave_id}  { name}   {address}   {values1}  {value2} ...
                             
								 values 1  ,value2 .. 表示可以跟多个值。
			  get_values  {slave_id}   {name}  {address}  {length}
			
			
                                           
                             
  附录：

常量定义：

#modbus exception codes
ILLEGAL_FUNCTION = 1
ILLEGAL_DATA_ADDRESS = 2
ILLEGAL_DATA_VALUE = 3
SLAVE_DEVICE_FAILURE = 4
COMMAND_ACKNOWLEDGE = 5
SLAVE_DEVICE_BUSY = 6
MEMORY_PARITY_ERROR = 8

#supported modbus functions
READ_COILS = 1
READ_DISCRETE_INPUTS = 2
READ_HOLDING_REGISTERS = 3
READ_INPUT_REGISTERS = 4
WRITE_SINGLE_COIL = 5
WRITE_SINGLE_REGISTER = 6
READ_EXCEPTION_STATUS = 7
DIAGNOSTIC = 8
REPORT_SLAVE_ID = 17
WRITE_MULTIPLE_COILS = 15
WRITE_MULTIPLE_REGISTERS = 16
READ_WRITE_MULTIPLE_REGISTERS = 23
DEVICE_INFO = 43

#supported block types
COILS = 1
DISCRETE_INPUTS = 2
HOLDING_REGISTERS = 3
ANALOG_INPUTS = 4

中文翻译：
Modbus异常代码

非法的_函数=1

非法的数据地址=2

非法的_data_value=3

从设备故障=4

命令确认=5

从设备忙=6

存储器奇偶校验错误=8



#支持的Modbus功能

读线圈＝1

读取离散输入=2

读取保持寄存器=3

读取输入寄存器=4

写入单个线圈=5

写单个寄存器=6

读取“异常”状态=7

诊断＝8

报告_slave_id=17

写入多个线圈=15

写入多个寄存器=16

读写多个寄存器=23

设备信息=43



#支持的块类型

线圈＝1

离散输入=2

保持寄存器=3

模拟输入=4




                  
        
               
