Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-17T15:56:25+08:00

====== 安全管理器 ======
创建日期 星期一 17 十二月 2018

一个安全管理器是一个对象，定义安全策略的应用程序。此策略指定不安全或敏感的操作。安全策略不允许的任何操作都会导致 SecurityException抛出。应用程序还可以查询其安全管理器以发现允许哪些操作。

通常，Web applet与浏览器或Java Web Start插件提供的安全管理器一起运行。除非应用程序本身定义一个，否则其他类型的应用程序通常在没有安全管理器的情 如果没有安全管理器，则该应用程序没有安全策略，并且没有任何限制。

本节介绍应用程序如何与现有安全管理器进行交互。有关更多详细信息，包括有关如何设计安全管理器的信息，请参阅“ 安全指南”。

一个安全管理器是一个对象，定义安全策略的应用程序。此策略指定不安全或敏感的操作。安全策略不允许的任何操作都会导致 SecurityException抛出。应用程序还可以查询其安全管理器以发现允许哪些操作。

通常，Web applet与浏览器或Java Web Start插件提供的安全管理器一起运行。除非应用程序本身定义一个，否则其他类型的应用程序通常在没有安全管理器的情 如果没有安全管理器，则该应用程序没有安全策略，并且没有任何限制。

本节介绍应用程序如何与现有安全管理器进行交互。有关更多详细信息，包括有关如何设计安全管理器的信息，请参阅“ 安全指南”。

与安全管理器交互
安全管理器是类型的对象 SecurityManager; 要获取对此对象的引用，请调用System.getSecurityManager。

SecurityManager appsm = System.getSecurityManager（）;
如果没有安全管理器，则此方法返回null。

一旦应用程序引用了安全管理器对象，它就可以请求执行特定操作的权限。标准库中的许多类都是这样做的。例如，System.exit使用退出状态终止Java虚拟机时，将调用SecurityManager.checkExit以确保当前线程具有关闭应用程序的权限。

SecurityManager类定义了许多用于验证其他类型操作的其他方法。例如，SecurityManager.checkAccess验证线程访问，并SecurityManager.checkPropertyAccess验证对指定属性的访问。每个操作或一组操作都有自己的方法。checkXXX()

此外，该组方法表示已受安全管理器保护的操作集。通常，应用程序不必直接调用任何方法。checkXXX()checkXXX()
