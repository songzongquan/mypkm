Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-13T17:06:23+08:00

====== 1-检索类对象 ======
创建日期 星期三 13 二月 2019

所有反射操作的入口点是 java.lang.Class。除了java.lang.reflect.ReflectPermission之外 ，java.lang.reflect中没有一个类 具有公共构造函数。要获得这些类，有必要调用 Class适当的方法。有几种方法可以获取Class， 具体取决于代码是否可以访问对象，类的名称，类型或现有 Class。

===== Object.getClass（） =====
如果对象的实例可用，则获取它的最简单方法 Class是调用 Object.getClass()。当然，这仅适用于所有继承自的引用类型 Object。一些例子如下。

类c =“foo”.getClass（）;
返回 Class 为  String

类c = System.console（）。getClass（）;
有一个与该static方法 返回的虚拟机关联的唯一控制台System.console()。返回的值 getClass()是 Class对应的 java.io.Console。

枚举E {A，B}
类c = A.getClass（）;
A是枚举的一个实例E; 因此 getClass()返回 Class对应的枚举类型E。

byte [] bytes = new byte [1024];
类c = bytes.getClass（）;
由于数组是 Objects，因此也可以getClass()在数组的实例上调用 。返回 Class对应于具有组件类型的数组byte。

import java.util.HashSet;
import java.util.Set;

设置<String> s = new HashSet <String>（）;
类c = s.getClass（）;
在这种情况下， java.util.Set是类型对象的接口 java.util.HashSet。返回的值 getClass()是对应的类 java.util.HashSet。

===== .class语法 =====
如果类型可用但没有实例，那么可以Class通过附加".class"类型的名称来获得a 。这也是获取Class原始类型的最简单方法 。

布尔b;
类c = b.getClass（）; //编译时错误

类c = boolean.class; //正确
请注意，该语句boolean.getClass()将产生编译时错误，因为boolean是基本类型，无法解除引用。该.class语法返回 Class对应于该类型boolean。

class c = java.io.PrintStream.class;
变量c将 Class与类型对应 java.io.PrintStream。

c__lass c = int [] [] [] .class;__
该.class语法可用于检索Class对应于给定类型的多维阵列的语法 。

===== Class.forName（） =====
如果类的完全限定名称可用，则可以Class使用静态方法获取相应 的名称 Class.forName()。这不能用于原始类型。数组类名称的语法描述如下 Class.getName()。此语法适用于引用和基元类型。

类c = Class.forName（“com.duke.MyLocaleServiceProvider”）;
此语句将根据给定的完全限定名称创建一个类。

class cDoubleArray = Class.forName（“[D”）;

类cStringArray = Class.forName（“[[Ljava.lang.String;”）;
该变量cDoubleArray将包含 Class对应于基本类型的数组double（即相同double[].class）。该cStringArray变量将包含 Class对应于二维数组 String（即相同String[][].class）。

===== 原始类型包装的TYPE字段 =====
该.class语法是一种更方便，以获得优选的方式 Class为一个基本类型; 然而，有另一种方式来获得 Class。每个基本类型void都有一个包装类 java.lang，用于将基元类型装箱到引用类型。每个包装类都包含一个名为的字段TYPE，该字段等于 Class被包装的基本类型。

C类= Double.TYPE;
还有一类 java.lang.Double是用来包裹基本类型double每当 Object是必需的。价值 Double.TYPE与double.class。相同。

C类= Void.TYPE;
Void.TYPE是完全相同的void.class。

===== 返回类的方法 =====
有几个Reflection API可以返回类，但只有在Class已经直接或间接获得的情况下才能访问这些类 。

Class.getSuperclass()
返回给定类的超类。
类c = javax.swing.JButton.class.getSuperclass（）;
超级 javax.swing.JButton是 javax.swing.AbstractButton。
Class.getClasses()
返回作为类成员的所有公共类，接口和枚举，包括继承的成员。
Class <？> [] c = Character.class.getClasses（）;
Character包含两个成员类 Character.Subset和 Character.UnicodeBlock。
Class.getDeclaredClasses()
返回在此类中显式声明的所有类接口和枚举。
Class <？> [] c = Character.class.getDeclaredClasses（）;
Character包含两个公共成员类 Character.Subset和 Character.UnicodeBlock和一个私有类Character.CharacterCache。
Class.getDeclaringClass()
java.lang.reflect.Field.getDeclaringClass()
java.lang.reflect.Method.getDeclaringClass()
java.lang.reflect.Constructor.getDeclaringClass()
返回 Class声明这些成员的位置。 匿名类声明不会有声明类，但会有一个封闭类。
import java.lang.reflect.Field;

Field f = System.class.getField（“out”）;
类c = f.getDeclaringClass（）;
该字段 out在中声明 System。
公共类MyClass {
	static Object o = new Object（）{
		public void m（）{} 
	};
	static Class <c> = o.getClass（）。getEnclosingClass（）;
}
由ois 定义的匿名类的声明类是null。
Class.getEnclosingClass()
返回类的直接封闭类。
类c = Thread.State.class（）。getEnclosingClass（）;
枚举的封闭类 Thread.State是 Thread。
公共类MyClass {
	static Object o = new Object（）{ 
		public void m（）{} 
	};
	static Class <c> = o.getClass（）。getEnclosingClass（）;
}
定义的匿名类o包含在MyClass。
