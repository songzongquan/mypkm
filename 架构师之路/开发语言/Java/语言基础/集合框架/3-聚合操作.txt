Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-01-06T11:59:57+08:00

====== 3-聚合操作 ======
创建日期 星期日 06 一月 2019

代表您迭代集合，这使您能够编写更简洁有效的代码来处理存储在集合中的元素。

注意：为了更好地理解本节中的概念，请查看 Lambda表达式和 方法引用部分。
你用集合做什么？您不是简单地将对象存储在集合中并将它们保留在那里。在大多数情况下，您使用集合来检索存储在其中的项目。

用聚合操作，在作批量操作是是比迭代法更加简洁的：

===== 管道和流 =====
管道是聚合操作的序列．
下面的例子打印出所有男性：
roster
	.stream()
	.filter(e -> e.getGender() == Person.Sex.MALE)
	.forEach(e -> System.out.println(e.getName()));
它用到了filter 和forEach
这看着比用迭代法更加的简洁．
管道包含了以下组件：
１．一个源：可以是集合，ｉｏ通道　，数组，一般的函数，
２．０个或多个中间操作：象filter，它产生一个新的stream，stream是一个序列，它不是一个保存元素的数据结构，它只是把集合中的元素拿出来放入管道，fiteｒ操作返回一个新stream，而把上一步匹配的元素放在这些新的流中，
3.一个末端操作：象foreach, 产生一个非stream的结果．
其中e->e.getGender()==Persion.Sex.MALE这就是lambda表达式．
下面的例子演示了对男人的平均年龄进行计算的代码：用到了filter,mapToInt,average
double average = roster
	.stream()
	.filter(p -> p.getGender() == Person.Sex.MALE)
	.mapToInt(Person::getAge)
	.average()
	.getAsDouble();

该mapToInt操作返回一个新的类型流IntStream（这是一个只包含整数值的流）。该操作将其参数中指定的函数应用于特定流中的每个元素。在此示例中，函数是Person::getAge，它是返回成员年龄的方法引用。（或者，您可以使用lambda表达式e -> e.getAge()。）因此，mapToInt此示例中的操作返回一个流，该流包含集合中所有男性成员的年龄roster。

该average操作计算类型流中包含的元素的平均值IntStream。它返回一个类型的对象OptionalDouble。如果流不包含任何元素，则该average操作返回一个空实例OptionalDouble，并调用该方法getAsDouble抛出一个NoSuchElementException。JDK包含许多终端操作，例如average通过组合流的内容返回一个值。这些操作称为还原操作 ; 有关详细信息，请参阅__缩减__部分 

===== 聚合操作和迭代器之间的差异 =====
像聚合操作一样forEach，似乎就像迭代器一样。但是，它们有几个根本区别：

1.**它们使用内部迭代**：聚合操作不包含next指示它们处理集合的下一个元素的方法。随着内部委派，您的应用程序决定哪些集合进行迭代，但是JDK决定如何遍历集合。使用外部迭代，您的应用程序确定它迭代的集合以及迭代它的方式。但是，外部迭代只能按顺序迭代集合的元素。内部迭代没有此限制。它可以更容易地利用并行计算，这涉及将问题分解为子问题，同时解决这些问题，然后将解决方案的结果与子问题相结合。有关更多信息，请参阅__并行性__一节 。

2.**它们处理流中的元素：**聚合操作处理流中的元素，而不是直接来自集合。因此，它们也称为流操作。

3. **它们支持行为作为参数**：您可以将lambda表达式指定 为大多数聚合操作的参数。这使您可以自定义特定聚合操作的行为。




