Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-01-05T13:01:25+08:00

====== Collection ======
创建日期 星期六 05 一月 2019
A Collection表示一组称为其元素的对象。该Collection接口用于传递需要最大通用性的对象集合。例如，按照惯例，所有通用集合实现都有一个带Collection参数的构造函数。此构造函数（称为转换构造函数）初始化新集合以包含指定集合中的所有元素，无论给定集合的子接口或实现类型如何。换句话说，它允许您转换集合的类型。


===== 方法列表： =====

==== １．基本操作 ====
int size(), boolean isEmpty(), boolean contains(Object element), boolean add(E element), boolean remove(Object element), and Iterator<E> iterator().

===== ２．对整个集合的操作 =====
操作方法boolean containsAll(Collection<?> c)， boolean addAll(Collection<? extends E> c)， boolean removeAll(Collection<?> c)，boolean retainAll(Collection<?> c)，和 void clear()。

==== ３．阵列操作的其他方法 ====

==== （例如，Object[] toArray()也<T> T[] toArray(T[] a)存在）。 ====
４．__在JDK 8和后，Collection接口也暴露的方法Stream<E> stream()和Stream<E> parallelStream()，从底层集合获得顺序的或并行的流。__（有关使用流的更多信息，请参阅标题为聚合操作的课程 。）

由于Collectiona Collection代表一组对象，因此界面会对您的期望产生影响。它有方法告诉你集合中有多少元素（size，isEmpty），检查给定对象是否在collection（contains）中的方法，从集合中添加和删除元素的方法（add，remove），以及提供集合（iterator）上的迭代器。

该add方法通常被定义为足以使得允许重复的集合以及不重复的集合是有意义的。它保证了Collection通话完成后，将包含指定的元素，并返回true如果Collection修改为调用的结果。类似地，该remove方法旨在从中删除指定元素的单个实例Collection，假设它包含要开始的元素，并且true如果Collection作为结果被修改则返回。

===== 遍历集合 =====
__遍历集合的方法有三种：（1）使用聚合操作（​​2）和for-each构造，（3）使用Iterators。__

==== 聚合操作 ====
__在JDK 8及更高版本中，迭代集合的首选方法是获取流并对其执行聚合操作。__聚合操作通常与lambda表达式结合使用，以使用较少的代码行使编程更具表现力。以下代码按顺序遍历一组形状并打印出红色对象：

myShapesCollection.stream（）
.filter（e  - > e.getColor（）== Color.RED）
.forEach（e  - > System.out.println（e.getName（）））;
同样，您可以轻松地请求并行流，如果集合足够大并且您的计算机具有足够的核心，这可能是有意义的：

myShapesCollection.parallelStream（）
.filter（e  - > e.getColor（）== Color.RED）
.forEach（e  - > System.out.println（e.getName（）））;
使用此API收集数据的方法有很多种。例如，您可能希望将a的元素转换Collection为String对象，然后将它们连接起来，用逗号分隔：

  String joined = elements.stream()
	.map(Object::toString)
	.collect(Collectors.joining(", "));
或者总结一下所有员工的工资：

int total = employees.stream()
.collect(Collectors.summingInt(Employee::getSalary)));
这些只是您可以对流和聚合操作执行的操作的几个示例。有关更多信息和示例，请参阅标题为“ 聚合操作”的课程 。

Collections框架一直提供许多所谓的“批量操作”作为其API的一部分。这些措施包括在整个集合进行操作的方法，如containsAll，addAll，removeAll，等不要混淆在JDK 8的新骨料业务和现有的批量操作（之间的主要区别中引入的聚合操作的那些方法containsAll，addAll等等。 ）旧版本都是变异的，这意味着它们都修改了底层集合。相反，新的集合操作则没有 修改基础集合。使用新的聚合操作和lambda表达式时，必须注意避免突变，以免将来引入问题，如果您的代码稍后从并行流运行

==== for-each ====
例；
for (Object o : collection)
	System.out.println(o);

==== 使用Iterators ====
如果需要，An Iterator是一个对象，使您可以遍历集合并有选择地从集合中删除元素。你Iterator通过调用它的iterator方法得到一个集合。以下是Iterator界面。
public interface Iterator <E> { 
	boolean hasNext（）; 
	E next（）; 
	void remove（）; //可选
}
该hasNext方法返回true如果迭代有多个元素，且next方法在迭代返回下一个元素。该remove方法删除next底层返回的最后一个元素Collection。remove每次调用时只能调用该方法一次，next如果违反此规则则抛出异常。

__请注意，这Iterator.remove是在迭代期间修改集合的唯一安全方法__; 如果在迭代进行过程中以任何其他方式修改基础集合，则行为不确定。

__在以下情况下需要时使用Iterator而不是for-each构造：__

__１．　删除当前元素。该for-each构造隐藏了迭代器，因此您无法调用remove。因此，该for-each构造不可用于过滤。__
__２．并行迭代多个集合。__
以下方法向您展示如何使用a Iterator来过滤任意对象Collection- 即遍历删除特定元素的集合。

static void filter（Collection <？> c）{ 
	for（Iterator <？> it = c.iterator（）; it.hasNext（）;）
		if（！cond（it.next（）））
			it.remove（）; 
}
__这段简单的代码是多态的，这意味着无论实现如何，它都适用于任何 代码Collection。__此示例演示了使用Java Collections Framework编写多态算法是多么容易。



===== 集合接口批量操作 =====
批量操作对整个操作执行操作Collection。您可以使用基本操作实现这些速记操作，__但在大多数情况下，此类实现效率较低。__以下是批量操作：

containsAll- true如果目标Collection包含指定的所有元素，则返回Collection。
addAll- 将指定的所有元素添加Collection到目标Collection。
removeAll- 从目标中删除Collection也包含在指定内容中的所有元素Collection。
retainAll- 从目标中删除Collection所有未包含在指定内容中的元素Collection。也就是说，它仅保留目标Collection中也包含在指定内容中的那些元素Collection。
clear- 从中删除所有元素Collection。
addAll，removeAll和retainAll方法在执行操作的过程中如果目标Collection改变了，则返回true

作为批量操作的功率的一个简单的例子，考虑下面的常用方法，从从一个Collection　e中除去指定元素c。

c.removeAll（Collections.singleton（E））;
更具体地说，假设您要从一个Collection中删除所有null元素。

c.removeAll（Collections.singleton（null））;
这个习惯用法Collections.singleton，它是一个静态工厂方法，它返回一个只包含指定元素的不可变元素的Set。

===== 集合接口阵列操作 =====
__这些toArray方法是作为集合和旧API之间的桥梁提供的，这些API期望输入上的数组__。数组操作允许将一个Collection的内容转换为数组。没有参数的简单形式创建了一个新的数组Object。更复杂的形式允许调用者提供数组或选择输出数组的运行时类型。

例如，假设c是a Collection。以下代码段将内容转储c到新分配的数组中，Object该数组的长度与中的元素数相同c。

Object [] a = c.toArray（）;
假设c已知只包含字符串（可能是因为c类型Collection<String>）。以下代码段将内容转储c到新分配的数组中，String该数组的长度与中的元素数相同c。

String [] a = c.toArray（new String [0]）;
