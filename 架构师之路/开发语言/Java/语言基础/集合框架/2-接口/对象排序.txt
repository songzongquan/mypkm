Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-01-05T16:22:28+08:00

====== 对象排序 ======
创建日期 星期六 05 一月 2019

A List l可以如下排序。

Collections.sort（l）;
如果List由String元素组成，它将按字母顺序排序。如果它由Date元素组成，它将按时间顺序排序。这是怎么发生的？String并且Date都实现了Comparable接口,为类提供了自然顺序，允许自动对该类的对象进行排序。在 下面的表格总结了一些实现更重要的Java平台类的。

Boolean	Boolean.FALSE < Boolean.TRUE
File	路径名称上依赖于系统的词典
String	辞书
Date	年代
CollationKey	特定于区域设置的词典

如果你试图排序list中的元素，而元素没有实现Comparable接口，将会抛出ClassCastException.　如果元素不能按comparator进行排序，Collections.sort(list, comparator) 调用也会抛出ClassCastException
两个元素如果能比较，叫做可比较对象类型　，尽管两个对象都实现了可比较接口，但不支持不同类型之间的比较操作．

===== 写自已的可比较类型 =====
需要定义你的类实现可比较接口，并实现comparedTo方法．这就是自然排序，即默认的排序方法
可比较接口包含　下面的方法：
public interface Comparable<T> {
	public int compareTo(T o);
}
该compareTo方法将接收对象与指定对象进行比较，并根据接收对象是否小于，等于或大于指定对象返回负整数0或正整数。如果指定的对象无法与接收对象进行比较，则该方法抛出一个ClassCastException。

一些限制：
* 对象是不可变的。在所有其他条件相同的情况下，不可变类型是要走的路，特别是对于将用作Sets中的元素或s中的键Map的对象。如果您在集合中修改元素或键，这些集合将会中断。
* 构造函数检查其参数null。这可以确保所有对象都很好地形成，这样其他任何方法都不会抛出NullPointerException。
* 该hashCode方法被重新定义。这对于重新定义equals方法的任何类都是必不可少的。（等于对象必须具有相同的哈希码。）
* 如果指定的对象是不合适的类型，则equals返回该方法。在这些情况下，该方法会抛出运行时异常。这些行为都是相应方法的一般合同所要求的。falsenullcompareTo
* 该toString方法已重新定义，因此它Name以人类可读的形式打印。这总是一个好主意，特别是对于要放入集合的对象。各种集合类型的toString方法取决于toString其元素，键和值的方法。

===== 比较器 =====
如果你想让对象用另一种排序方法来排序，而不是自然排序．或者这个对象本身没有实现自然排序接口，你要指定一个特定的排序方法．
那么你需要提供一个Comparator, 它要实现下面的接口方法

public interface Comparator<T> {
	int compare(T o1, T o2);
}
该compare方法比较其两个参数，返回负整数，0或正整数，具体取决于第一个参数是小于，等于还是大于第二个参数。如果其中一个参数的类型不合适Comparator，则该compare方法抛出一个ClassCastException。

在Comparable中所说的大部分内容也适用Comparator。编写compare方法几乎与编写compareTo方法完全相同，只是前者将两个对象作为参数传入。__该compare方法具有服从同样的四个技术限制为Comparable的compareTo出于同样的原因方法-一个Comparator必须引起它比较对象进行整体秩序。__
