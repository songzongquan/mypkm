Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-22T16:21:40+08:00

====== 2-字符流 ======
创建日期 星期六 22 十二月 2018

Java平台使用Unicode约定存储字符值。字符流I / O自动将此内部格式转换为本地字符集。在Western语言环境中，本地字符集通常是ASCII的8位超集。

对于大多数应用程序，具有字符流的I / O并不比具有字节流的I / O复杂。使用流类完成的输入和输出会自动转换为本地字符集和从本地字符集转换。使用字符流代替字节流的程序会自动适应本地字符集，并且可以进行国际化 - 所有这些都不需要程序员的额外努力。

如果国际化不是优先事项，您可以简单地使用字符流类，而不必过多关注字符集问题。之后，如果国际化成为优先事项，您的程序可以进行调整而无需进行大量重新编码。有关更多信息，请参阅 国际化路径。

===== 使用字符流 =====
所有字符流类都来自 Reader和 Writer。与字节流一样，有一些专门用于文件I / O的字符流类： FileReader和 FileWriter。
用法与字节流也差不多．

===== 使用字节流的字符流 =====
字符流通常是字节流的“包装器”。字符流使用字节流来执行物理I / O，而字符流处理字符和字节之间的转换。FileReader例如，在使用FileInputStream时FileWriter使用FileOutputStream。

有两个通用的字节到字符“桥”流： InputStreamReader和 OutputStreamWriter。当没有符合您需求的预打包字符流类时，使用它们来创建字符流。该 插座的教训在 网络跟踪显示了如何创建从套接字类提供的字节流的字符流。

===== 面向行的I / O. =====
字符I / O通常以比单个字符更大的单位出现。一个常见的单位是行：一串字符，末尾有一个行终止符。行终止符可以是回车符/换行序列（"\r\n"），单个回车符（"\r"）或单个换行符（"\n"）。支持所有可能的行终止符允许程序读取在任何广泛使用的操作系统上创建的文本文件。

让我们修改CopyCharacters示例以使用面向行的I / O. 要做到这一点，我们必须使用我们以前从未见过的两个类， BufferedReader并且 PrintWriter。我们将在缓冲I / O和格式化中更深入地探索这些类。现在，我们只对他们对面向行的I / O的支持感兴趣。

该 CopyLines示例调用BufferedReader.readLine并PrintWriter.println一次输入和输出一行。
