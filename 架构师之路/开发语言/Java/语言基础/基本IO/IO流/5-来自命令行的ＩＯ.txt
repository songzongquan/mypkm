Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-22T18:53:49+08:00

====== 5-来自命令行的ＩＯ ======
创建日期 星期六 22 十二月 2018

程序通常从命令行运行，并在命令行环境中与用户交互。Java平台以两种方式支持这种交互：通过标准流和控制台。

===== 标准流 =====
Java平台支持三种标准流：标准输入，通过访问System.in; 标准输出，可通过System.out; 和标准错误，通过访问System.err。这些对象是自动定义的，不需要打开。标准输出和标准误差均用于输出; 单独具有错误输出允许用户将常规输出转移到文件并仍然能够读取错误消息。有关更多信息，请参阅命令行解释程序的文档。

您可能希望标准流是字符流，但由于历史原因，它们是字节流。System.out并被System.err定义为 PrintStream对象。虽然它在技术上是一个字节流，但PrintStream利用内部字符流对象来模拟字符流的许多功能。

相比之下，System.in是一个没有字符流功能的字节流。使用标准输入作为字符流，包裹System.in在InputStreamReader。

InputStreamReader cin = new InputStreamReader（System.in）;

===== 控制台 =====

控制台是标准流的更高级替代方案。这是一个预定义的单个对象， Console它具有标准流提供的大部分功能，以及其他功能。控制台对于安全密码输入特别有用。控制台对象还提供了为真字符流，通过其输入和输出流reader和writer方法。

在程序可以使用控制台之前，它必须尝试通过调用来检索Console对象System.console()。如果Console对象可用，则此方法将返回该对象。如果System.console返回NULL，则不允许控制台操作，因为操作系统不支持它们，或者因为程序是在非交互式环境中启动的。

Console对象支持通过其readPassword方法输入安全密码。此方法有助于以两种方式保护密码输入。首先，它抑制回显，因此密码在用户屏幕上不可见。其次，readPassword返回一个字符数组，而不是a String，因此密码可以被覆盖，一旦不再需要就将其从内存中删除。
