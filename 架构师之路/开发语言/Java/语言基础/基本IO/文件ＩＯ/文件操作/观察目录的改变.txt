Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-25T16:30:52+08:00

====== 观察目录的改变 ======
创建日期 星期二 25 十二月 2018

要实现此功能（称为文件更改通知），程序必须能够检测文件系统上相关目录的内容。一种方法是轮询文件系统以查找更改，但这种方法效率低下。它不能扩展到具有数百个要监视的打开文件或目录的应用程序。

该java.nio.file软件包提供了一个名为Watch Service API的文件更改通知API。此API使您可以使用监视服务注册目录（或多个目录）。注册时，告诉服务您感兴趣的事件类型：文件创建，文件删除或文件修改。当服务检测到感兴趣的事件时，它将被转发到注册的进程。已注册的进程有一个线程（或一个线程池）专用于监视它已注册的任何事件。当一个事件进入时，它会根据需要进行处理。

本节包括以下内容：

===== 观看服务概述 =====
该WatchServiceAPI是相当低的水平，使您可以自定义。您可以按原样使用它，也可以选择在此机制之上创建高级API，以便它适合您的特定需求。

以下是实施监视服务所需的基本步骤：

1 WatchService为文件系统创建“观察者”。
2 对于要监视的每个目录，请将其注册到观察程序。注册目录时，您可以指定要通知的事件类型。您收到WatchKey您注册的每个目录的实例。
3 实现无限循环以等待传入事件。当事件发生时，密钥将发出信号并放入观察者的队列中。
4 从观察者的队列中检索密钥。您可以从密钥中获取文件名。
5 检索密钥的每个待处理事件（可能有多个事件）并根据需要进行处理。
6 重置密钥，然后继续等待事件。
7 关闭服务：当线程退出或关闭时（通过调用其closed方法），监视服务退出。
8 WatchKeys是线程安全的，可以与java.nio.concurrent包一起使用。您可以将线程池专用 于此工作。

===== 试试看 =====

===== 创建Watch Service并注册事件 =====
第一步是WatchService使用类中的 newWatchService方法创建一个new FileSystem，如下所示：

WatchService watcher = FileSystems.getDefault（）。newWatchService（）;
接下来，使用监视服务注册一个或多个对象。Watchable可以注册实现该接口的任何对象 。的Path类实现了Watchable接口，所以要被监视的每个目录登记为Path对象。

与任何一样Watchable，Path该类实现两个register方法。此页面使用双参数版本 register(WatchService, WatchEvent.Kind<?>...)。（三参数版本采用a WatchEvent.Modifier，目前尚未实现。）

使用监视服务注册对象时，可以指定要监视的事件类型。支持的 StandardWatchEventKinds事件类型如下：

ENTRY_CREATE - 创建目录条目。
ENTRY_DELETE - 删除目录条目。
ENTRY_MODIFY - 修改目录条目。
OVERFLOW - 表示事件可能已丢失或丢弃。您无需注册OVERFLOW活动即可接收该活动。

===== 处理事件 =====
事件处理循环中的事件顺序如下：

获取手表钥匙。提供了三种方法：
poll - 返回排队的密钥（如果可用）。null如果不可用，立即返回一个值。
poll(long, TimeUnit) - 返回排队的密钥（如果有）。如果排队的密钥不能立即可用，程序将等待指定的时间。所述TimeUnit参数确定在指定的时间是否是纳秒，毫秒，或一些其他时间单元。
take - 返回排队的密钥。如果没有可用的排队密钥，则此方法将等待。
处理密钥的挂起事件。你取List的 WatchEvents从 pollEvents方法。
使用该kind方法检索事件类型 。无论密钥注册的是什么事件，都可以接收OVERFLOW事件。您可以选择处理溢出或忽略它，但您应该测试它。
检索与事件关联的文件名。文件名存储为事件的上下文，因此该 context方法用于检索它。
处理完密钥事件后，需要ready通过调用将密钥置回状态 reset。如果此方法返回false，则键不再有效，循环可以退出。这一步非常重要。如果您未能调用reset，此密钥将不会再收到任何事件。
表键具有状态。在任何给定时间，其状态可能是以下之一：

1 Ready表示密钥已准备好接受事件。首次创建时，密钥处于就绪状态。
2 Signaled表示一个或多个事件已排队。一旦密钥被发出信号，它就不再处于就绪状态，直到reset调用该 方法。
3 Invalid表示密钥不再有效。发生以下事件之一时会发生此状态：
该过程通过使用该cancel方法明确取消密钥 。
该目录无法访问。
手表服务已 关闭。

===== 检索文件名 =====
从事件上下文中检索文件名。该 Email示例使用以下代码检索文件名：

WatchEvent <Path> ev =（WatchEvent <Path>）事件;
Path filename = ev.context（）;

===== 何时使用和不使用此API =====
Watch Service API专为需要通知文件更改事件的应用程序而设计。它非常适合任何应用程序，如编辑器或IDE，可能有许多打开的文件，需要确保文件与文件系统同步。它也非常适合于监视目录的应用程序服务器，可能等待.jsp或.jar丢弃文件，以便部署它们。

此API 不适用于索引硬盘驱动器。大多数文件系统实现都支持文件更改通知。Watch Service API在可用的情况下利用此支持。但是，当文件系统不支持此机制时，Watch Service将轮询文件系统，等待事件。
