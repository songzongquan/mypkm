Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-25T16:37:11+08:00

====== 旧版文件ｉｏ ======
创建日期 星期二 25 十二月 2018

在Java SE 7发布之前，java.io.File该类是用于文件I / O的机制，但它有几个缺点。

１许多方法在失败时都没有抛出异常，因此无法获得有用的错误消息。例如，如果文件删除失败，程序将收到“删除失败”，但不知道是否因为该文件不存在，用户没有权限，或者还有其他问题。
２该rename方法不能跨平台一致地工作。
３对符号链接没有真正的支持。
４需要更多对元数据的支持，例如文件权限，文件所有者和其他安全属性。
５访问文件元数据效率低下。
６许多File方法没有扩展。通过服务器请求大型目录列表可能会导致挂起。大目录也可能导致内存资源问题，从而导致拒绝服务。
７如果存在循环符号链接，则无法编写可递归遍历文件树的可靠代码并进行适当响应。
也许你有遗留代码使用java.io.File并希望利用这些java.nio.file.Path功能，而对代码的影响最小。

java.io.File类提供的 toPath方法，该方法旧式转换File实例的java.nio.file.Path实例，如下所示：

Path input = file.toPath();
然后，您可以利用Path该类可用的丰富功能集。

例如，假设您有一些删除文件的代码：

file.delete（）;
您可以修改此代码以使用该Files.delete方法，如下所示：
Path fp = file.toPath（）; 
Files.delete（FP）;
相反，该 Path.toFile方法构造java.io.File对象的Path对象。

将java.io.File功能映射到java.nio.file
由于文件I / O的Java实现已在Java SE 7发行版中完全重新构建，因此您无法将一种方法替换为另一种方法。如果要使用java.nio.file程序包提供的丰富功能，最简单的解决方案是使用File.toPath上一节中建议的 方法。但是，如果您不想使用该方法或者它不足以满足您的需求，则必须重写文件I / O代码。
