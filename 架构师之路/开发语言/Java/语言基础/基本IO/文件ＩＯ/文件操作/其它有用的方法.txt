Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-25T16:33:42+08:00

====== 其它有用的方法 ======
创建日期 星期二 25 十二月 2018

一些有用的方法不适用于本课程的其他地方，并在此处介绍。本节包括以下内容：

===== 确定MIME类型 =====
要确定文件的MIME类型，您可能会发现该 probeContentType(Path)方法很有用。
请注意，probeContentType如果无法确定内容类型，则返回null。

此方法的实现具有高度的平台特性，并非绝对可靠。内容类型由平台的默认文件类型检测器确定。例如，如果检测器确定文件的内容类型application/x-java基于.class扩展名，则可能会被欺骗。

FileTypeDetector如果默认值不足以满足您的需求，您可以提供自定义 。


===== 默认文件系统 =====
要检索默认文件系统，请使用该 getDefault方法。

===== 路径字符串分隔符 =====
POSIX文件系统的路径分隔符是正斜杠，/对于Microsoft Windows是反斜杠，\。其他文件系统可能使用其他分隔符。要检索Path默认文件系统的分隔符，可以使用以下方法之一：

String separator = File.separator;
String separator = FileSystems.getDefault（）。getSeparator（）;
该 getSeparator方法还用于检索任何可用文件系统的路径分隔符。

===== 文件系统的文件存储 =====
文件系统具有一个或多个文件存储来保存其文件和目录。的文件存储表示底层存储设备。在UNIX操作系统中，每个安装的文件系统都由文件存储表示。在Microsoft Windows中，每个卷都由文件存储：C:，D:等等表示。

要检索文件系统的所有文件存储列表，可以使用该 getFileStores方法。此方法返回一个Iterable，它允许您使用 增强的for语句迭代所有根目录。

for（FileStore store：FileSystems.getDefault（）。getFileStores（））{
   ...
}
如果要检索特定文件所在的文件存储，请使用类中的 getFileStore方法Files，如下所示：

路径文件= ...;
FileStore store = Files.getFileStore（file）;
该 DiskUsage示例使用该getFileStores方法。
