Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-28T16:51:52+08:00

====== 7-捕获组 ======
创建日期 星期五 28 十二月 2018

在上 一节中，我们看到了量词一次如何附加到一个字符，字符类或捕获组。但到目前为止，我们还没有详细讨论过捕捉群体的概念。

捕获组是将多个字符视为一个单元的一种方法。它们是通过将要分组的字符放在一组括号中来创建的。例如，正则表达式(dog)创建一个包含字母"d" "o"和的组"g"。与捕获组匹配的输入字符串部分将保存在内存中，以便以后通过反向引用进行调用（如下面的“反向引用”一节中所述）。

===== 编号 =====
如PatternAPI 中所述 ，捕获组通过从左到右计算它们的左括号来编号。((A)(B(C)))例如，在表达式中，有四个这样的组：

((A)(B(C)))
(A)
(B(C))
(C)
要找出表达式中存在多少个组，请在groupCount匹配器对象上调用该方法。该groupCount方法返回int显示匹配器模式中存在的捕获组的数量。在此示例中，groupCount将返回数字4，表明该模式包含4个捕获组。

还有一个特殊组，即组0，它始终代表整个表达式。该组未包括在报告的总数中groupCount。以...开头的组(?是纯粹的非捕获组，它们不捕获文本而不计入组总数。（稍后将在模式类的方法部分中看到非捕获组的示例 。）

了解组的编号非常重要，因为某些Matcher方法接受将int特定组编号指定为参数：

public int start(int group)：返回上一个匹配操作期间给定组捕获的子序列的起始索引。
public int end (int group)：返回上一个匹配操作期间给定组捕获的子序列的最后一个字符的索引加1。
public String group (int group)：返回上一个匹配操作期间给定组捕获的输入子序列。

===== 反向引用 =====
与捕获组匹配的输入字符串部分保存在内存中，以便以后通过反向引用进行调用。在正则表达式中将反向引用指定为反斜杠（\），后跟一个数字，指示要调用的组的编号。例如，表达式(\d\d)定义了一个匹配行中两个数字的捕获组，可以通过反向引用在表达式中稍后调用\1。

要匹配任何2位数字，后跟完全相同的两位数字，您将使用(\d\d)\1正则表达式：

 
输入你的正则表达式：（\ d \ d）\ 1
输入要搜索的输入字符串：1212
我发现文本“1212”从索引0开始到索引4结束。
如果更改最后两位数，则匹配将失败：

 
输入你的正则表达式：（\ d \ d）\ 1
输入要搜索的输入字符串：1234
找不到匹配项。
对于嵌套捕获组，反向引用的工作方式完全相同：指定反斜杠后跟要调用的组的编号。
