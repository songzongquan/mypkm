Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-08T10:00:05+08:00

====== 2-设置区域设置 ======
创建日期 星期五 08 二月 2019

国际化计划可以在全世界以不同方式显示信息。例如，该程序将在巴黎，东京和纽约显示不同的消息。如果本地化过程已经过微调，该程序将在纽约和伦敦显示不同的消息，以解释美国和英国英语之间的差异。国际化计划如何确定最终用户的适当语言和区域？简单。它引用了一个Locale对象。

甲Locale目的是一种用于语言和区域的特定组合的标识符。如果某个类根据其行为而改变Locale，则称其对语言环境敏感。例如，NumberFormat该类是区域敏感的; 它返回的数字的格式取决于Locale。因此NumberFormat可以返回902 300（法国），或902.300（德国），或902,300（美国）。Locale对象只是标识符。实际工作（例如格式化和检测字边界）由区域设置敏感类的方法执行。

以下部分说明如何使用Locale对象：

[[+创建区域设置]]
创建Locale对象时，通常会指定语言代码和国家/地区代码。第三个参数，即变体，是可选的。

[[+BCP 47扩展]]
本节介绍如何将Unicode区域设置扩展或专用扩展添加到区域设置。

[[+识别可用的区域设置]]
区域设置敏感类仅支持某些Locale定义。本节介绍如何确定Locale支持哪些定义。

[[+语言标记过滤和查找]]
本节介绍语言标记，语言标记过滤和语言标记查找的国际化支持。
[[+区域设置的作用域]]
在Java平台上，您不能通过Locale在运行应用程序之前设置环境变量来指定全局。相反，您要么依赖默认的Locale，要么Locale为每个区域设置敏感的对象分配一个。
[[+区域敏感服务SPI]]
本节介绍如何启用与语言环境相关的数据和服务的插件。除了当前可用的语言环境之外，这些SPI（服务提供程序接口）还提供对更多语言环境的支持。
