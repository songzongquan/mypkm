Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-08T10:33:46+08:00

====== 创建区域设置 ======
创建日期 星期五 08 二月 2019

有几种方法可以创建Locale对象。无论使用何种技术，创建都可以像指定语言代码一样简单。但是，您可以通过设置区域（也称为“国家/地区”）和变体代码来进一步区分区域设置。__如果您使用的是JDK 7或更高版本，则还可以指定脚本代码和Unicode语言环境扩展。__

__创建Locale对象的四种方法是：__

**Locale.Builder 类**
**Locale 构造函数**
**Locale.forLanguageTag 工厂方法**
**Locale 常量**
版本说明：  本Locale.Builder类和forLanguageTag方法在Java SE 7的发布中添加。

===== LocaleBuilder 类 =====
的 Locale.Builder工具类可用于构造Locale一个符合IETF BCP 47的语法对象。例如，要指定法语和加拿大的国家/地区，您可以调用Locale.Builder构造函数，然后按如下方式链接setter方法：

Locale aLocale = new Locale.Builder（）。setLanguage（“fr”）。setRegion（“CA”）。build（）;
下一个示例Locale为美国和英国的英语创建对象：

Locale bLocale = new Locale.Builder（）。setLanguage（“en”）。setRegion（“US”）。build（）; 
Locale cLocale = new Locale.Builder（）。setLanguage（“en”）。setRegion（“GB”）。build（）;
最后一个示例Locale为俄语创建一个对象：

Locale dLocale = new Locale.Builder（）。setLanguage（“ru”）。setScript（“Cyrl”）。build（）;

===== Locale 构造函数 =====
类中有三个可Locale用于创建Locale对象的构造函数：

Locale(String language)
Locale(String language, String country)
Locale(String language, String country, String variant)
以下示例Locale为加拿大的法语，美国和英国的英语以及俄语创建对象。

aLocale = new Locale（“fr”，“CA”）; 
bLocale = new Locale（“en”，“US”）; 
cLocale = new Locale（“en”，“GB”）; 
dLocale = new Locale（“ru”）;
无法Locale在早于JDK 7的版本中的对象上设置脚本代码。

===== forLanguageTag 工厂方法 =====
如果您的语言标记字符串符合IETF BCP 47标准，则可以使用forLanguageTag(String)Java SE 7发行版中引入的 工厂方法。例如：

Locale aLocale = Locale.forLanguageTag（“en-US”）; 
Locale bLocale = Locale.forLanguageTag（“ja-JP-u-ca-japanese”）;
Locale 常量
为方便起见，该Locale课程为某些语言和国家/地区提供 常量。例如：

cLocale = Locale.JAPAN; 
dLocale = Locale.CANADA_FRENCH;
指定语言常量时，Locale未定义区域部分。接下来的三个语句创建等效Locale对象：

j1Locale = Locale.JAPANESE; 
j2Locale = new Locale.Builder（）.setLanguage（“ja”）.build（）; 
j3Locale = new Locale（“ja”）;
Locale由以下三个语句创建的对象也是等效的：

j4Locale = Locale.JAPAN; 
j5Locale = new Locale.Builder（）.setLanguage（“ja”）.setRegion（“JP”）。build（）; 
j6Locale = new Locale（“ja”，“JP”）;

===== 代码 =====
以下部分讨论语言代码和可选脚本，区域和变体代码。

==== 语言代码(Language) ====
语言代码是符合ISO 639标准的两个或三个小写字母。您可以在http://www.loc.gov/standards/iso639-2/php/code_list.php找到ISO 639代码的完整列表 。

下表列出了一些语言代码。

示例语言代码
语言代码	描述
de	德语
en	英语
fr	法国
ru	俄语
ja	日本
jv	爪哇
ko	朝鲜的
zh	中文

==== 脚本代码(Script) ====
脚本代码以大写字母开头，后跟三个小写字母，符合ISO 15924标准。您可以在http://unicode.org/iso15924/iso15924-codes.html找到 ISO 15924代码的完整列表 。

下表列出了一些脚本代码。

示例脚本代码
脚本代码	描述
Arab	阿拉伯
Cyrl	西里尔
Kana	片假名
Latn	拉丁
检索脚本信息的方法有三种Locale：

getScript()- 返回对象的4个字母的脚本代码Locale。如果没有为语言环境定义脚本，则返回空字符串。
getDisplayScript() - 返回适合显示给用户的语言环境脚本的名称。如果可能，将为默认语言环境本地化名称。因此，例如，如果脚本代码是“Latn”，则返回的diplay脚本名称将是英语语言环境的字符串“Latin”。
getDisplayScript(Locale)- Locale如果可能，返回区域设置的指定本地化的显示名称。

==== 区域代码(Region) ====
区域（国家/地区）代码包含符合ISO 3166标准的两个或三个大写字母，或符合UN M.49标准的三个数字。可以在http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html找到代码的副本 。

下表包含几个示例国家和地区代码。

样本区域代码
A-2代码	A-3代码	数字代码	描述
AU	AUS	036	澳大利亚
BR	BRA	076	巴西
CA	CAN	124	加拿大
CN	CHN	156	中国
DE	DEU	276	德国
FR	FRA	250	法国
IN	IND	356	印度
RU	RUS	643	俄罗斯联邦
US	USA	840	美国

==== 变体代码(Variant) ====
__可选variant代码可用于进一步区分您的Locale。例如，变体代码可用于指示区域代码未涵盖的辩证差异。__

__版本注意：   在Java SE 7发行版之前，变体代码有时用于识别不是特定于语言或区域的差异。__例如，它可能已被用于识别计算平台之间的差异，例如Windows或UNIX。根据IETF BCP 47标准，不鼓励使用此标准。

__要定义与您的环境相关的非语言特定变体，请使用扩展机制，如 BCP 47扩展中所述。__
从符合IETF BCP 47标准的Java SE 7版本开始，变体代码专门用于指示定义语言或其方言的其他变体。IETF BCP 47标准对变体子标签强加了语法限制。您可以在http://www.iana.org/assignments/language-subtag-registry上查看变体代码列表（搜索变体） 。

例如，Java SE使用变体代码来支持泰语。按照惯例，和语言环境的NumberFormat对象将使用常见的阿拉伯数字形状或阿拉伯数字来格式化泰语数字。然而，对于区域设置使用泰语数字形状。摘录 演示了这一点：thth_THNumberFormatth_TH_THThaiDigits.java

String outputString = new String（）; 
Locale [] thaiLocale = { 
			 new Locale（“th”），
			 new Locale（“th”，“TH”），
			 new Locale（“th”，“TH”，“TH”）
		 }; 

for（Locale locale：thaiLocale）{ 
	NumberFormat nf = NumberFormat.getNumberInstance（locale）; 
	outputString = outputString + locale.toString（）+“：”; 
	outputString = outputString + nf.format（573.34）+“\ n”; 
}
