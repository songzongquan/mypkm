Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-13T15:14:09+08:00

====== 日期和时间 ======
创建日期 星期三 13 二月 2019

本说明：  此日期和时间部分使用java.util包中的日期和时间API 。__JDK 8发行版中提供的java.time API提供了一个全面的日期和时间模型，它对java.util类提供了重大改进。__该java.time的API在描述 日期时间线索。在 遗产日期，时间码页面可能具有特殊意义的。
Date对象代表日期和时间。如果Date没有先将对象转换String为正确格式的对象，则无法显示或打印对象。什么是“适当的”格式？首先，格式应符合最终用户的惯例Locale。例如，德国人认为这20.4.09是一个有效的日期，但美国人希望同样的日期出现4/20/09。其次，格式应包括必要的信息。例如，测量网络性能的程序可以报告经过的毫秒数。在线约会日历可能不会显示毫秒，但会显示一周中的几天。

本节介绍__如何以各种方式和区域设置敏感的方式格式化日期和时间__。如果您遵循这些技术，您的程序将以适当的方式显示日期和时间Locale，但您的源代码将保持独立于任何特定的Locale。

===== 使用预定义格式 =====
本DateFormat类提供预定义的格式类型是特定于语言环境和易于使用。

本 DateFormat类允许你在一个语言环境敏感的方式预定义的样式设置格式的日期和时间。以下部分演示了如何将该DateFormat类与一个名为的程序 一起使用DateFormatDemo.java。

==== 日期 ====
使用DateFormat该类格式化日期分为两步。__首先，使用该getDateInstance方法创建格式化程序。其次，您调用该format方法，该方法返回String包含格式化日期的方法__。以下示例通过调用以下两种方法来格式化今天的日期：

今天的日期;
String dateOut;
DateFormat dateFormatter;

dateFormatter = DateFormat.getDateInstance（DateFormat.DEFAULT，currentLocale）;
today = new Date（）;
dateOut = dateFormatter.format（今天）;

System.out.println（dateOut +“”+ currentLocale.toString（））;
此代码生成的输出如下。请注意，日期的格式因人而异Locale。由于DateFormat区域设置敏感，它会处理每个格式的详细信息Locale。

2009年7月30日fr_FR
30.06.2009 de_DE
2009年6月30日en_US
上面的代码示例指定了DEFAULT格式样式。该DEFAULT样式只是DateFormat该类提供的预定义格式样式之一，如下所示：

默认
短
介质
长
充分
下表显示了如何使用美国和法国语言环境为每种样式设置日期格式：

样本日期格式
样式	美国地区	法国语言
DEFAULT	2009年6月30日	2009年7月30日
SHORT	09年6月30日	30/06/09
MEDIUM	2009年6月30日	2009年7月30日
LONG	2009年6月30日	2009年7月30日
FULL	2009年6月30日，星期二	mardi 30 juin 2009

==== 时 ====
Date对象代表日期和时间。__使用DateFormat类格式化时间类似于格式化日期，除了使用getTimeInstance方法创建格式化程序__，如下所示：

DateFormat timeFormatter =
	DateFormat.getTimeInstance（DateFormat.DEFAULT，currentLocale）;
下表显示了美国和德国语言环境的各种预定义格式样式：

采样时间格式
样式	美国地区	德国语言环境
DEFAULT	上午7:03:47	7时03分47秒
SHORT	上午7:03	07:03
MEDIUM	上午7:03:47	7时03分07秒
LONG	太平洋夏令时间上午7:03:47	07:03:45 PDT
FULL	太平洋夏令时间上午7:03:47	7.03 Uhr PDT

==== 日期和时间 ====
__要在其中显示日期和时间，请String使用getDateTimeInstance方法创建格式化程序。第一个参数是日期样式，第二个参数是时间样式。第三个参数是Locale__。这是一个简单的例子：

DateFormat formatter = DateFormat.getDateTimeInstance（
						   DateFormat.LONG， 
						   DateFormat.LONG， 
						   currentLocale）;
下表显示了美国和法国语言环境的日期和时间格式样式：

样本日期和时间格式
样式	美国地区	法国语言
DEFAULT	2009年6月30日上午7:03:47	30 juin 2009 07:03:47
SHORT	6/30/09 7:03 AM	30/06/09 07:03
MEDIUM	2009年6月30日上午7:03:47	30 juin 2009 07:03:47
LONG	2009年6月30日上午7:03:47 PDT	2009年7月30日07:03:47 PDT
FULL	2009年6月30日星期二上午7:03:47 PDT	mardi 30 juin 2009 07 h 03 PDT


===== 自定义格式 =====
通过SimpleDateFormat该类，您可以创建自定义的特定于语言环境的格式。
上一节“ 使用预定义格式 ”描述了DateFormat类提供的格式样式。在大多数情况下，这些预定义格式就足够 但是，如果要创建自己的自定义格式，可以使用 SimpleDateFormat该类。

下面的代码示例演示了SimpleDateFormat该类的方法。您可以在名为的文件中找到示例的完整源代码 SimpleDateFormatDemo。

==== 关于模式 ====
创建SimpleDateFormat对象时，指定模式String。模式的内容String决定了日期和时间的格式。有关模式语法的完整说明，请参阅日期格式模式语法中的表。

以下代码根据String传递给SimpleDateFormat构造函数的模式格式化日期和时间。在String由返回的format方法中包含将被显示的格式化的日期和时间。

今天的日期;
字符串输出;
SimpleDateFormat格式化程序;

formatter = new SimpleDateFormat（pattern，currentLocale）;
today = new Date（）;
output = formatter.format（今天）;
System.out.println（pattern +“”+ output）;
下表显示了Locale指定US时上一代码示例生成的输出：

==== 自定义日期和时间格式 ====
图案	产量
DD.MM.YY	30.06.09
yyyy.MM.dd G'at'hh：mm：ss z	公元2009.06.30 PDT 08:29:36
EEE，MMM d，''yy	09年6月30日星期二
h：mm a	晚上8:29
H：毫米	8:29
H：MM：SS：SSS	8：28：36：249
K：mm a，z	上午8:29，PDT
yyyy.MMMMM.dd GGG hh：mm aaa	2009.June.30 AD 08:29 AM

==== 模式和区域设置 ====
该SimpleDateFormat班是语言环境敏感。如果在SimpleDateFormat没有Locale参数的情况下实例化，它将根据默认值格式化日期和时间Locale。模式和Locale确定格式。对于相同的模式，SimpleDateFormat如果Locale变化，可以不同地格式化日期和时间。

在下面的示例代码中，模式在创建SimpleDateFormat对象的语句中进行了硬编码：

今天的日期;
字符串结果;
SimpleDateFormat格式化程序;

formatter = new SimpleDateFormat（“EEE d MMM yy”，currentLocale）;
today = new Date（）;
result = formatter.format（今天）;
System.out.println（“Locale：”+ currentLocale.toString（））;
System.out.println（“结果：”+结果）;
当currentLocale设置为不同的值时，前面的代码示例生成此输出：

区域设置：fr_FR
结果：mar。09年3月30日
区域设置：de_DE
结果：迪09年6月30日
区域设置：en_US
结果：09年6月30日星期二

==== 日期格式模式语法 ====
您可以从下表中的符号列表中为日期和时间设计自己的格式模式：

符号	含义	介绍	例
G	时代指示符	文本	广告
ÿ	年	数	2009年
中号	一年一个月	文字和数字	七月和七月
d	一个月一天	数	10
H	上午/下午（1-12）	数	12
H	小时（0-23）	数	0
米	分钟	数	三十
小号	第二分钟	数	55
小号	毫秒	数	978
Ë	一周中的一天	文本	星期二
d	一年中的一天	数	189
F	一个月中的某一天	数	2（7月的第2个星期三）
w ^	一年一周	数	27
w ^	一周一个月	数	2
一个	上午/下午标记	文本	下午
ķ	小时（1-24）	数	24
ķ	上午/下午（0-11）	数	0
ž	时区	文本	太平洋标准时间
“	逃避文字	分隔符	（没有）
“	单引号	文字	“
不是字母的字符被视为带引号的文本。也就是说，即使它们没有包含在单引号内，它们也会出现在格式化文本中。

您指定的符号字母数也决定了格式。例如，如果“zz”模式导致“PDT”，则“zzzz”模式生成“太平洋夏令时”。下表总结了这些规则：

介绍	符号数	结果
文本	1 - 3	缩写形式，如果存在的话
文本	> = 4	完整形式
数	最低位数是必需的	较短的数字用零填充（一年，如果'y'的计数为2，则年份被截断为2位数）
文字和数字	1 - 2	数字表格
文字和数字	3	文字形式

===== 更改日期格式符号 =====
使用DateFormatSymbols该类，您可以更改表示月份名称，星期几和其他格式元素的符号。
该类的format方法SimpleDateFormat返回String由数字和符号组成的。例如，在String“2009年4月10日星期五”中，符号为“星期五”和“四月”。如果封装的符号SimpleDateFormat不符合您的需要，您可以使用 DateFormatSymbols。您可以更改代表月份，星期几和时区等名称的符号。下表列出了DateFormatSymbols允许您修改符号的方法：

DateFormatSymbol 方法
setter方法	方法修改的符号示例
setAmPmStrings	PM
setEras	AD
setMonths	December
setShortMonths	Dec
setShortWeekdays	Tue
setWeekdays	Tuesday
setZoneStrings	PST
以下示例调用setShortWeekdays以将星期几的短名称从小写字符更改为大写字符。这个例子的完整源代码是 DateFormatSymbolsDemo。数组参数中的第一个元素setShortWeekdays是null String。因此，阵列是基于一个而不是基于零的。该SimpleDateFormat构造函数接收经修改的DateFormatSymbols对象作为参数。这是源代码：

今天的日期;
字符串结果;
SimpleDateFormat格式化程序;
DateFormatSymbols符号;
String [] defaultDays;
String [] modifiedDays;

symbols = new DateFormatSymbols（new Locale（“en”，“US”））;
defaultDays = symbols.getShortWeekdays（）;

for（int i = 0; i <defaultDays.length; i ++）{
	System.out.print（defaultDays [i] +“”）;
}
的System.out.println（）;

String [] capitalDays = {
	“”，“SUN”，“MON”，
	“TUE”，“WED”，“THU”，
	“FRI”，“SAT”
};
symbols.setShortWeekdays（capitalDays）;

modifiedDays = symbols.getShortWeekdays（）;
for（int i = 0; i <modifiedDays.length; i ++）{
	System.out.print（modifiedDays [i] +“”）;
}
的System.out.println（）;
的System.out.println（）;

formatter = new SimpleDateFormat（“E”，符号）;
today = new Date（）;
result = formatter.format（今天）;
System.out.println（“今天的星期几：”+结果）;
上面的代码生成了这个输出：

 星期一星期二星期三星期四星期五星期五 
 SUN MON TUE WED THU FRI SAT 

今天的一天：周一要
