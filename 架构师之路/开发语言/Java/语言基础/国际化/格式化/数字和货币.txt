Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-09T16:55:50+08:00

====== 数字和货币 ======
创建日期 星期六 09 二月 2019

程序以与语言环境无关的方式存储和操作数字。在显示或打印数字之前，程序必须将其转换String为区域设置敏感格式。例如，在法国，数字123456.78的格式应为123 456,78，在德国则应为123.456,78。在本节中，您将学习如何使程序独立于小数点，千位分隔符和其他格式设置属性的语言环境约定。

===== 1.使用预定义格式 =====
使用NumberFormat类提供的工厂方法，您可以获得数字，货币和百分比的特定于语言环境的格式。
通过调用NumberFormat类提供的方法 ，您可以根据格式设置数字，货币和百分比的格式 Locale。下面的材料演示了一个名为的示例程序的格式化技术 NumberFormatDemo.java。

==== 1.1 数字 ====
您可以使用这些 NumberFormat方法来格式化基本类型的数字，例如double，以及它们相应的包装器对象，例如 Double。

以下代码示例 Double根据 Locale。调用该 getNumberInstance方法返回特定于语言环境的实例 NumberFormat。该 format方法接受 Double作为参数并返回格式化的数字 String。

例：
 numberFormatter = NumberFormat.getNumberInstance（currentLocale）;
	quantityOut = numberFormatter.format（quantity）;
	amountOut = numberFormatter.format（amount）;


=== 使用阿拉伯数字以外的数字形状 ===
默认情况下，当文本包含数字值时，将使用阿拉伯数字显示这些值。如果首选其他Unicode数字形状，请使用 java.awt.font.NumericShaper该类。通过NumericShaperAPI，您可以在任何Unicode数字形状中显示内部表示为ASCII值的数值。有关详细信息，请参阅 将拉丁数字转换为其他Unicode数字。

此外，某些区域设置具有变体代码，这些代码指定使用Unicode数字形状代替阿拉伯数字，例如泰语的区域设置。请参阅部分 变量代码中 创建一个区域设置 以获取更多信息。

==== 1.2 货币 ====
如果您正在编写业务应用程序，则可能需要格式化和显示货币。您可以使用与数字相同的方式格式化货币，但您调用getCurrencyInstance以创建格式化程序除外 。当您调用该 format方法时，它将返回 String包含格式化数字和相应货币符号的方法。

此代码示例演示如何以特定于语言环境的方式格式化货币：
 Double currencyAmount = new Double（9876543.21）;
	 Currency currentCurrency = Currency.getInstance（currentLocale）;
	NumberFormat currencyFormatter = 
		NumberFormat.getCurrencyInstance（currentLocale）;

	的System.out.println（
		__currentLocale.getDisplayName（）+“，”+__
		__currentCurrency.getDisplayName（）+“：”+__
		__currencyFormatter.format（currencyAmount））;__
}
其输出将是：
French (France), Euro: 9 876 543,21 €
German (Germany), Euro: 9.876.543,21 €
English (United States), US Dollar: $9,876,543.21

请注意， Currency该类的设计使得Currency任何给定货币永远不会有多个 实例。因此，没有公共构造函数。如前面的代码示例所示，您将Currency使用getInstance方法获取 实例 。

本 Currency类包含其它的方法来检索货币相关的信息：

* getAvailableCurrencies ：返回JDK中的所有可用货币
* getCurrencyCode：返回Currency实例的ISO 4217数字代码
* getSymbol：返回Currency实例的符号 。您可以选择将Locale对象指定为参数 。请考虑以下摘录：

Locale enGBLocale = 
	new Locale.Builder().setLanguage("en").setRegion("GB").build();

Locale enUSLocale =
	new Locale.Builder().setLanguage("en").setRegion("US").build();

Currency currencyInstance = Currency.getInstance(enUSLocale);

System.out.println(
	"Symbol for US Dollar, en-US locale: " +
	currencyInstance.getSymbol(enUSLocale));

System.out.println(
	"Symbol for US Dollar, en-UK locale: " +
	currencyInstance.getSymbol(enGBLocale));
摘录打印出以下内容：

美元符号，en-US区域：美元
符号，英国区域：美元
此摘录表明货币符号可能因区域设置而异。

=== 对ISO 4217货币代码的可扩展支持 ===
ISO 4217是国际标准组织发布的标准。它指定三个字母的代码（和等效的三位数字代码）来表示货币和资金。该标准由外部机构维护，独立于Java SE平台发布。

假设一个国家采用不同的货币，ISO 4217维护机构发布货币更新。要实现此更新，从而在运行时取代默认货币，请创建一个名为的属性文件<JAVA_HOME>/lib/currency.properties。此文件包含ISO 3166国家/ 地区代码的键/值对 以及ISO 4217货币数据。值部分由三个以逗号分隔的ISO 4217货币值组成：字母代码，数字代码和次要单元。以散列字符（#）开头的任何行都被视为注释行。
例如：

# Sample currency property for Canada
CA = CAD，124,2的样本货币属性
CAD代表加元; 124是加元的数字代码; 并且2是次要单位，是货币表示小数货币所需的小数位数。例如，以下属性文件将默认加拿大货币取代为没有任何小于美元的单位的加元：

CA = CAD，124,0

==== 1.3  百分比 ====
您还可以使用NumberFormat类的方法 来设置百分比的格式。要获取特定于语言环境的格式化程序，请调用该 getPercentInstance方法。使用此格式化程序，小数部分（例如0.75）显示为75％。

以下代码示例显示如何格式化百分比。

static public void displayPercent（Locale currentLocale）{ 

	Double percent = new Double（0.75）; 
	NumberFormat percentFormatter; 
	String percentOut; 

	percentFormatter = NumberFormat.getPercentInstance（currentLocale）; 
	percentOut = percentFormatter.format（percent）; 
	System.out.println（percentOut +“”+ currentLocale.toString（））; 
}

===== 使用模式格式化 =====
使用DecimalFormat该类，您可以使用String模式指定数字的格式。该DecimalFormatSymbols级允许修改格式符号如小数分隔符和减号。

===== 2.  自定义格式 =====
您可以使用DecimalFormat该类将十进制数格式化为特定于语言环境的字符串。此类允许您控制前导和尾随零，前缀和后缀，分组（千）分隔符和小数分隔符的显示。如果要更改格式符号（例如小数点分隔符），可以将其DecimalFormatSymbols与DecimalFormat类一起使用。这些类在数字格式化方面提供了极大的灵活性，但它们可以使您的代码更加复杂。

下面的文本使用演示DecimalFormat和DecimalFormatSymbols类的示例。此材料中的代码示例来自一个名为的示例程序 DecimalFormatDemo。

==== 构建模式 ====
您可以使用DecimalFormat模式指定格式设置属性String。该模式确定格式化数字的外观。有关模式语法的完整说明，请参见数字格式模式语法。

下面的示例通过将模式传递String给DecimalFormat构造函数来创建格式化程序。该format方法接受一个double值作为参数，并返回格式化的数字String：

DecimalFormat myFormatter = new DecimalFormat（pattern）;
String output = myFormatter.format（value）;
System.out.println（value +“”+ pattern +“”+ output）;
前面的代码行的输出如下表所述。该value是多少，一个double，那就是被格式化。这pattern是String指定格式化属性。的output，这是一个String，表示格式的数字。

DecimalFormatDemo程序输出
value	pattern	output	说明
123456.789	###，###。###	123,456.789	井号（＃）表示一个数字，逗号是分组分隔符的占位符，句点是小数分隔符的占位符。
123456.789	###。##	123456.79	将value有三个数字的小数点右边，但pattern只有两个。该format方法通过四舍五入来处理这个问题。
123.78	000000.000	000123.780	的pattern指定前导和尾随零，因为0字符被用来代替井号（＃）。
12345.67	$ ###，###。###	$ 12,345.67	pattern美元符号（$）中的第一个字符。请注意，它紧接在格式化的最左边数字之前output。
12345.67	\ u00A5 ###，###。###	¥12,345.67	在pattern与Unicode值00A5指定为日元（¥）货币符号。

==== 区域敏感格式 ====
前面的示例DecimalFormat为默认值创建了一个对象Locale。如果您想要一个DecimalFormat非默认对象Locale，则实例化a NumberFormat然后将其强制转换为DecimalFormat。这是一个例子：

NumberFormat nf = NumberFormat.getNumberInstance（loc）;
DecimalFormat df =（DecimalFormat）nf;
df.applyPattern（图案）;
String output = df.format（value）;
System.out.println（pattern +“”+ output +“”+ loc.toString（））;
运行上一个代码示例将导致后面的输出。格式化的数字位于第二列，具体取决于Locale：

###，###。### 123,456.789 zh_CN
###，###。### 123.456,789 de_DE
###，###。### 123 456,789 fr_FR
到目前为止，这里讨论的格式模式遵循美国英语的惯例。例如，在模式###，###。##中，逗号是千位分隔符，句点表示小数点。如果最终用户没有接触到它，那么这个约定很好。但是，某些应用程序（如电子表格和报表生成器）允许最终用户定义自己的格式设置模式。对于这些应用程序，最终用户指定的格式模式应使用本地化表示法。在这些情况下，您需要applyLocalizedPattern在DecimalFormat对象上调用该方法。

==== 改变格式符号 ====
您可以使用 DecimalFormatSymbols类更改format方法生成的格式化数字中出现的符号。__这些符号包括小数分隔符，分组分隔符，减号和百分号等。__

下一个示例DecimalFormatSymbols通过将奇怪的格式应用于数字来演示该类。这种不寻常的格式是调用的结果setDecimalSeparator，setGroupingSeparator和setGroupingSize方法。

DecimalFormatSymbols unusualSymbols = new DecimalFormatSymbols(currentLocale);
unusualSymbols.setDecimalSeparator('|');
unusualSymbols.setGroupingSeparator('^');

String strange = "#,##0.###";
DecimalFormat weirdFormatter = new DecimalFormat(strange, unusualSymbols);
weirdFormatter.setGroupingSize(4);

String bizarre = weirdFormatter.format(12345.678);
System.out.println(bizarre);

运行时，此示例以奇怪的格式打印数字：

1 ^ 2345 | 678「

==== 数字格式模式语法 ====
您可以按照以下BNF图表指定的规则为数字设计自己的格式模式：

pattern：= subpattern {; subpattern}
subpattern：= {prefix} integer {.fraction} {suffix}
prefix：='\\ u0000'..'\\ uFFFD' -  specialCharacters
后缀：='\\ u0000'..'\\ uFFFD' -  specialCharacters
integer：='＃'*'0'*'0'
分数：='0'*'＃'*
上图中使用的符号如下表所示：

符号	描述
X*	0个或更多个X实例
(X | Y)	X或Y
X..Y	从X到Y的任何字符，包括在内
S - T	S中的字符，除了T中的字符
{X}	X是可选的
在前面的BNF图中，第一个子模式指定了正数的格式。第二个子模式是可选的，指定负数的格式。

虽然未在BNF图中注明，但逗号可能出现在整数部分内。

在子模式中，您可以使用特殊符号指定格式。这些符号如下表所述：

符号	描述
0	一个数字
＃	一个数字，零显示为缺席
。	小数分隔符的占位符
，	占位符用于分组分隔符
Ë	为指数格式分隔尾数和指数
;	分隔格式
-	默认负前缀
％	乘以100并显示为百分比
？	乘以1000并按照mille显示
¤	货币符号; 用货币符号代替; 如果翻倍，用国际货币符号代替; 如果存在于模式中，则使用货币小数分隔符而不是小数分隔符
X	任何其他字符都可以在前缀或后缀中使用
“	用于引用前缀或后缀中的特殊字符
