Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-02-09T15:53:49+08:00

====== 准备使用ResourceBundle ======
创建日期 星期六 09 二月 2019

===== 识别特定于语言环境的对象 =====
如果您的应用程序具有用户界面，则它包含许多特定于语言环境的对象。首先，您应该查看源代码并查找随之变化的对象Locale。您的列表可能包含从以下类实例化的对象：

String
Image
Color
AudioClip

您会注意到此列表不包含表示数字，日期，时间或货币的对象。这些对象的显示格式随着Locale不同而变化，但对象本身则不然。例如，您可以根据Locale情况对Date行格式化，但Date无论如何都使用相同的Locale对象。不是在ResourceBundle中隔离这些对象，而是使用特殊的区域设置敏感格式化类格式化它们。您将在格式化课程的日期和时间部分 学习如何执行此操作 。

通常，存储在ResourceBundle中的对象是预定义的并随产品一起提供。程序运行时不会修改这些对象。例如，您应该在ResourceBundle中中存储Menu标签，因为它是特定于语言环境的，并且在程序会话期间不会更改。但是，您不应该在ResourceBundle中隔离最终用户在TextField对象中输入的String对象。诸如此类的数据String可能每天都有所不同。它特定于程序会话，而不是Locale程序运行的程序。

通常，您需要在ResourceBundle中隔离的大多数对象都是String对象。但是，并非所有String对象都是特定于语言环境的。例如，如果String是进程间通信使用的协议元素，则不需要进行本地化，因为最终用户永远不会看到它。

是否定位某些String对象的决定并不总是很清楚。日志文件就是一个很好的例子。如果日志文件由一个程序写入并由另一个程序读取，则两个程序都使用日志文件作为通信缓冲区。假设最终用户偶尔检查此日志文件的内容。日志文件不应该本地化吗？另一方面，如果最终用户很少检查日志文件，则翻译成本可能不值得。您决定本地化此日志文件取决于许多因素：程序设计，易用性，翻译成本和可支持性。


===== 组织ResourceBundle对象 =====
您可以根据他们所包含的对象类别来组织ResourceBundle对象。例如，您可能希望将订单输入窗口的所有GUI标签加载到被调用的窗口中一个名叫OrderLabelsBundle的ResourceBundle对象。使用多个ResourceBundle对象有几个优点：

您的代码更易于阅读和维护。
您将避免使用大量ResourceBundle对象，这可能需要很长时间才能加载到内存中。
您可以通过仅在需要时加载每个ResourceBundle,减少内存使用量
您可以通过ResourceBundle仅在需要时加载每个内存来减少内存使用量
