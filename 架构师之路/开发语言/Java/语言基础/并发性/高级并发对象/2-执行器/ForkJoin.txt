Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-22T14:51:11+08:00

====== fork|join ======
创建日期 星期六 22 十二月 2018

fork / join框架是ExecutorService接口的实现，可帮助您利用多个处理器。它专为可以递归分解成小块的工作而设计。目标是使用所有可用的处理能力来增强应用程序的性能。

与任何ExecutorService实现一样，fork / join框架将任务分配给线程池中的工作线程。fork / join框架是不同的，因为它使用了工作窃取算法。不用做的事情的工作线程可以从仍然忙碌的其他线程中窃取任务。

fork / join框架的中心是ForkJoinPool类，是 类的扩展AbstractExecutorService。ForkJoinPool实现核心工作窃取算法并可以执行 ForkJoinTask进程。

===== 基本用法 =====
使用fork / join框架的第一步是编写执行一部分工作的代码。您的代码应类似于以下伪代码：

如果（我的一部分工作是足够小）
  做的工作直接
别的
  分裂我的工作分为两个部分
  调用两个部分，并等待结果
将此代码包装在ForkJoinTask子类中，通常使用其中一种更专业的类型 RecursiveTask（可以返回结果）或 RecursiveAction。

在您的ForkJoinTask子类是准备好了，创建一个表示要完成所有的工作对象，把它传递给ForkJoinPool实例的一个方法invoke()

如：
protected static int sThreshold = 100000;

protected void compute() {
	if (mLength < sThreshold) {
		computeDirectly();
		return;
	}
    
	int split = mLength / 2;
    
	invokeAll(new ForkBlur(mSource, mStart, split, mDestination),
			  new ForkBlur(mSource, mStart + split, mLength - split,
						   mDestination));
}

===== 标准实施 =====
除了使用fork / join框架来实现在多处理器系统上同时执行的任务的自定义算法（例如ForkBlur.java上一节中的示例）之外，Java SE中有一些通常有用的功能，它们已经使用fork / join实现了框架。在Java SE 8中引入的一种这样的实现被 java.util.Arrays类用于其parallelSort()方法。这些方法类似于sort()，但通过fork / join框架利用并发性。在多处理器系统上运行时，大型阵列的并行排序比顺序排序更快。但是，这些方法如何利用fork / join框架超出了Java Tutorials的范围。有关此信息，请参阅Java API文档。

fork / join框架的另一个实现由java.util.streams包中的方法使用，该方法是为Java SE 8发布而安排的Project Lambda的一部分 。有关更多信息，请参阅 Lambda表达式部分。
