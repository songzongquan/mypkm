Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-21T22:58:38+08:00

====== 线程池 ======
创建日期 星期五 21 十二月 2018

大多数执行程序实现都在java.util.concurrent使用线程池，它由工作线程组成。这种线程Runnable与Callable它执行的任务分开存在，通常用于执行多个任务。

使用工作线程可以最大限度地减少线程创建带来的开销 线程对象使用大量内存，在大型应用程序中，分配和释放许多线程对象会产生大量的内存管理开销。

一种常见类型的线程池是固定线程池。这种类型的池总是运行指定数量的线程; 如果一个线程在它仍在使用时以某种方式被终止，它将自动被一个新线程替换。任务通过内部队列提交到池中，只要有多个活动任务而不是线程，该队列就会保存额外的任务。

固定线程池的一个重要优点是使用它的应用程序可以优雅地降级。要理解这一点，请考虑一个Web服务器应用程序，其中每个HTTP请求都由一个单独的线程处理。如果应用程序只是为每个新的HTTP请求创建一个新线程，并且系统接收的请求数超过它可以立即处理的数量，那么当所有这些线程的开销超过系统容量时，应用程序将突然停止响应所有请求。由于可以创建的线程数量有限制，应用程序不会像它们进入时那样快速地为HTTP请求提供服务，但它将在系统可以维持的时间内尽快为它们提供服务。

创建使用固定线程池的执行程序的一种简单方法是调用 newFixedThreadPool工厂方法。 java.util.concurrent.Executors此类还提供以下工厂方法：

该 newCachedThreadPool方法使用可扩展线程池创建执行程序。此执行程序适用于启动许多短期任务的应用程序。
该 newSingleThreadExecutor方法创建一次执行单个任务的执行程序。
几种工厂方法是ScheduledExecutorService上述执行器的版本。
如果上述工厂方法提供的执行者都不满足您的需求，则构建实例 java.util.concurrent.ThreadPoolExecutor或 java.util.concurrent.ScheduledThreadPoolExecutor将为您提供其他选项。
