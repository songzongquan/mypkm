Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-17T17:48:34+08:00

====== 受保护块 ======
创建日期 星期一 17 十二月 2018

线程通常必须协调它们的行为．大多方式是采用守卫块，这个块以一个条件判断开始，除非它满足，否则下面的块不会得到执行．
一种方法，是用一个空循环，但这比较耗费ｃｐｕ，不推荐

public void guardedJoy（）{ 
	//简单的循环守卫。浪费
	//处理器时间。不要这样做！
	while（！joy）{} 
	System.out.println（“Joy已经实现！”）; 
}

一个更有效的守卫调用 Object.wait暂停当前​​线程。在wait另一个线程发出可能发生某些特殊事件的通知之前，调用不会返回 - 尽管不一定是此线程正在等待的事件：

public synchronized void guardedJoy（）{ 
	//这个守卫只为每个特殊事件循环一次，这可能不是
	我们正在等待的事件。
	while（！joy）{ 
		try { 
			__wait__（）; 
		} catch（InterruptedException e）{} 
	} 
	System.out.println（“已经达到了喜悦和效率！”）; 
}
注意：  始终wait在测试等待条件的循环内调用。不要假设中断是针对您正在等待的特定条件，或者条件仍然是真的。

什么这个版本guardedJoy同步？假设d是我们用来调用的对象wait。当线程调用时d.wait，它必须拥有内部锁d- 否则会引发错误。wait在synchronized方法中调用是获取内部锁的简单方法。

当wait被调用时，线程释放锁，并暂停执行。在将来的某个时间，另一个线程将获取相同的锁并调用 Object.notifyAll，通知等待该锁的所有线程发生了重要的事情：

public synchronized notifyJoy（）{ 
	joy = true; 
	notifyAll（）; 
}
在第二个线程释放锁之后的一段时间，第一个线程重新获取锁并通过从调用返回来恢复wait。

注意：  有第二种通知方法notify，可以唤醒单个线程。因为notify不允许您指定被唤醒的线程，所以它仅在大规模并行应用程序中有用 - 即具有大量线程的程序，所有程序都执行类似的工作。在这样的应用程序中，您不关心哪个线程被唤醒。
让我们使用受保护的块来创建Producer-Consumer应用程序。这种应用程序在两个线程之间共享数据：生成器，创建数据，以及使用它的消费者。两个线程使用共享对象进行通信。协调是必不可少的：消费者线程不得在生产者线程交付之前尝试检索数据，并且如果消费者未检索旧数据，则生产者线程不得尝试传递新数据。
