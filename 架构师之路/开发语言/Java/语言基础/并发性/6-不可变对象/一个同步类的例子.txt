Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-18T11:19:14+08:00

====== 一个同步类的例子 ======
创建日期 星期二 18 十二月 2018

该类 SynchronizedRGB定义了表示颜色的对象。每个对象将颜色表示为代表主要颜色值的三个整数和一个给出颜色名称的字符串。

public class SynchronizedRGB {

	// Values must be between 0 and 255.
	private int red;
	private int green;
	private int blue;
	private String name;

	private void check(int red,
					   int green,
					   int blue) {
		if (red < 0 || red > 255
			|| green < 0 || green > 255
			|| blue < 0 || blue > 255) {
			throw new IllegalArgumentException();
		}
	}

	public SynchronizedRGB(int red,
						   int green,
						   int blue,
						   String name) {
		check(red, green, blue);
		this.red = red;
		this.green = green;
		this.blue = blue;
		this.name = name;
	}

	public void set(int red,
					int green,
					int blue,
					String name) {
		check(red, green, blue);
		synchronized (this) {
			this.red = red;
			this.green = green;
			this.blue = blue;
			this.name = name;
		}
	}

	public synchronized int getRGB() {
		return ((red << 16) | (green << 8) | blue);
	}

	public synchronized String getName() {
		return name;
	}

	public synchronized void invert() {
		red = 255 - red;
		green = 255 - green;
		blue = 255 - blue;
		name = "Inverse of " + name;
	}
}

SynchronizedRGB必须小心使用，以免被发现处于不一致状态。例如，假设一个线程执行以下代码：

SynchronizedRGB color =
	新的SynchronizedRGB（0,0,0，“Pitch Black”）;
...
int myColorInt = color.getRGB（）; //声明1
String myColorName = color.getName（）; //声明2
如果另一个线程color.set在语句1之后但在语句2之前调用，则其值myColorInt将与值不匹配myColorName。为了避免这种结果，必须将这两个语句绑定在一起：

synchronized（color）{
	int myColorInt = color.getRGB（）;
	String myColorName = color.getName（）;
} 
这种不一致性只适用于可变对象 - 对于不可变版本来说，它不会成为问题SynchronizedRGB。
