Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-12T16:17:46+08:00

====== 2-范型类型 ======
创建日期 星期三 12 十二月 2018

一个“范型类型”是指一个普通的类型或接口，在类型上被参数化了。
格式如下：
class name<T1, T2, ..., Tn> { /* ... */ }

举例：
/**
 * Generic version of the Box class.
 * @param <T> the type of the value being boxed
 */
public class Box<T> {
	// T stands for "Type"
	private T t;

	public void set(T t) { this.t = t; }
	public T get() { return t; }
}
T代表参数，它只要不是基本类型即可，同样的这也可以用于接口定义。

===== 键入参数命名约定 =====
按照惯例，类型参数名称是单个大写字母。这与您已经了解的变量命名约定形成了鲜明的对比 ，并且有充分的理由：如果没有这种约定，就很难区分类型变量和普通类或接口名称。

最常用的类型参数名称是：

E - Element（Java Collections Framework广泛使用）
K - 钥匙
N - 数字
T型
V - 价值
S，U，V等 - 第2，第3，第4类型

===== 调用和实例化泛型类型 =====
要从代码中引用通用Box类，必须执行泛型类型调用，它将T替换为某些具体值，例如Integer：

Box <Integer> integerBox;
您可以将泛型类型调用视为与普通方法调用类似，但不是将参数传递给方法，而是将类型参数（在本例中为Integer）传递给Box类本身

===== 钻石 =====
在Java SE 7及更高版本中，只要编译器可以从上下文中确定或推断类型参数，就可以用一组空的类型参数（<>）替换调用泛型类的构造函数所需的类型参数。 。这对尖括号<>非正式地称为钻石。例如，您可以使用以下语句创建Box <Integer>的实例：

Box <Integer> integerBox = new Box <>（）;
有关菱形表示法和类型推断的更多信息，请参阅 类型推断。

===== 多种类型参数 =====
如前所述，泛型类可以有多个类型参数。例如，通用的OrderedPair类，它实现了通用的Pair接口：

public interface Pair <K，V> { 
	public K getKey（）; 
	public V getValue（）; 
} 

===== 参数化类型 =====
您还可以使用参数化类型（即List <String>）替换类型参数（即K或V）。例如，使用OrderedPair <K，V>示例：
即嵌套使用。
OrderedPair <String，Box <Integer >>> p = new OrderedPair <>（“primes”，new Box <Integer>（...））;
