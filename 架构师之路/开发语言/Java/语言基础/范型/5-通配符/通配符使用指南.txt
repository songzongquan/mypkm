Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-12-14T17:39:51+08:00

====== 通配符使用指南 ======
创建日期 星期五 14 十二月 2018

通配符使用指南
学习使用泛型编程时，更令人困惑的一个方面是确定何时使用上限有界通配符以及何时使用下限有界通配符。此页面提供了设计代码时要遵循的一些准则。

出于本讨论的目的，将变量视为提供两个函数之一是有帮助的：

一个“In”变量
“in”变量向代码提供数据。想象一下带有两个参数的复制方法：copy（src，dest）。该SRC参数提供的数据被复制，因此它是“在”参数。
一个“Out”变量
“out”变量保存数据以供其他地方使用。在复制示例中，copy（src，dest），dest参数接受数据，因此它是“out”参数。
当然，一些变量既用于“进入”又用于“出”目的 - 该方案也在指南中解决。

在决定是否使用通配符以及适合使用哪种类型的通配符时，可以使用“in”和“out”原则。以下列表提供了遵循的准则：

通配符指南： 
使用extends关键字定义带有上限通配符的“in”变量。
使用super关键字定义带有下限通配符的“out”变量。
在可以使用Object类中定义的方法访问“in”变量的情况下，使用无界通配符。
在代码需要作为“in”和“out”变量访问变量的情况下，不要使用通配符。
这些指南不适用于方法的返回类型。应该避免使用通配符作为返回类型，因为它强制程序员使用代码来处理通配符。

另外：由List <？extends  ...>可以非正式地认为是只读的，但这不是一个严格的保证。
