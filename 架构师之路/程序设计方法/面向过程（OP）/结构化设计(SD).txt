Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-05-16T13:55:04+08:00

====== 结构化设计(SD) ======
创建日期 星期四 16 五月 2019

===== 程序结构图（SC） =====
即程序模模块划分的表达。 大模块调用小模块，形成一个树形结构。表达模块的划分和模块之间的调用关系。
采用自顶向下，逐步细化的设计方法。


===== DFD转换成结构图 =====

先将DFD图的加工划分成输入、处理、输出三类
	图中含字符“P”的加工框代表一个变换，含“D”的加工框代表一个调度中心；
	其他不含字母的加工框代表普通的输入输出或简单的处理。

然后输入区的调用方向和数据流方向相反，输出的调用方式与数据流相同，
其本上一个加工就是一个模块，
顶层的大加工作为一个大模块，层次基本差不多。

==== 其中模块划分原则与方法 ====
参考 ： https://blog.csdn.net/hu19930613/article/details/82708292
1.高内聚： 
2.低耦合：

内聚性：又称块内联系，指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。

耦合性：也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决与模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。

方法：

==== 控制扇入与扇出 ====

一个模块调用其他模块的个数，称为该模块的扇出。扇出越大，设计该模块时需要考虑的问题就越多，因而复杂性越高。

为了控制模块的复杂性，一个模块的扇出不宜过大，一般认为不要超过7。如果发现某个模块的扇出较大

一个模块被其他模块调用的个数，称为该模块的扇入。扇入大些，一般不会影响问题的复杂性，而且扇入越大，说明该模块的复用性越好 


结构图
{{./pasted_image.png}}

	如图 8-9 所示，结构图的基本成分包括模块、调用（模块之间的调用关系）和数据（模块间传递及处理数据信息）。

	结构图是在需求分析阶段产生的数据流图的基础上进行进一步的设计。它将 DFD 图中的信息流分为两种类型。

	变换流：信息首先沿着输入通路进入系统，并将其转换为内部表示，然后通过变换中心（加工）的处理，再沿着输出转换为外部形式离开系统。具有这种特性的加工流就是变换流。

	事务流：信息首先沿着输入通路进入系统，事务中心根据输入信息的类型在若干个动作序列（活动流）中选择一个执行，这种信息流称为事务流。

	3．程序流程图和盒图

	程序流程图和盒图都是用来描述程序的细节逻辑的，其符号如图 8-10 所示。
{{./pasted_image001.png}}

	程序流程图的特点是简单、直观、易学，但它的缺点也正是由于其随意性而使得画出来的流程图容易成为非结构化的流程图。而盒图正是为了解决这一问题设计的，它是一种符合结构化程序设计原则的图形描述工具。

	盒图的主要特点是功能域明确、无法任意转移控制、容易确定全局数据和局部数据的作用域、容易表示嵌套关系、可以表示模块的层次结构。但它也带来了一个副作用，那就是修改相对比较困难。

 

	4．PAD 和 PDL 

	PAD 是问题分析图的缩写，它符合自顶向下、逐步求精的原则，也符合结构化程序设计的思想，它最大的特点在于能够很方便地转换为程序语言的源程序代码。

	PDL 则是语言描述工具的缩写，它和高级程序语言很相似，也包括数据说明部分和过程部分，还可以带注解等成分，但它是不可执行的。PDL 是一种形式化语言，其控制结构的描述是确定的，但内部的描述语法是不确定的。PDL 通常也被称为伪码。
