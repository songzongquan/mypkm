Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-04-30T11:17:37+08:00

====== ext2文件系统 ======
Created 星期一 30 四月 2018

===== 块组 =====
为了方便管理大量的inode,block，采用块组方案，每一块组都有独立 的superblock,inode,block,如下图所示：
{{./pasted_image.png}}
数据块data block
ext2文件系统的数据块大小分1k,2k,4k.   块大了，支持的单一文件大小与文件系统总容量就大。

===== inode 表 =====
inode表保存以下信息：
该文件的存取模式(read/write/excute);
该文件的拥有者与群组(owner/group);
该文件的容量;
该文件创建或状态改变的时间(ctime);
最近一次的读取时间(atime );
最近修改的时间(mtime);
定义文件特性的旗标(flag),如 SetUID... ;
该文件真正内容的指向 (pointer );

==== inode 的 大小与结构 ====
每个 inode 大小均固定为 128 Bytes (新的 ext4 与 xfs 可设置到 256 Bytes);
每个文件都仅会占用一个 inode 而已;
承上,因此文件系统能够创建的文件数量与 inode 的数量有关;
系统读取文件时需要先找到 inode,并分析 inode 所记录的权限与使用者是否符合,若符合才能够开始实际读取 block 的内
容。

我们约略来分析一下 EXT2 的 inode / block 与文件大小的关系好了。inode 要记录的数据非常多,但偏偏又只有 128Bytes
而已, 而 inode 记录一个 block 号码要花掉 4Byte ,假设我一个文件有 400MB 且每个 block 为 4K 时, 那么至少也要十万笔 block
号码的记录呢!inode 哪有这么多可记录的信息?为此我们的系统很聪明的将 inode 记录 block 号码的区域定义为12个直接,一个间
接, 一个双间接与一个三间接记录区。

==== superblock 的内容 ====

block 与 inode 的总量;
未使用与已使用的 inode / block 数量;
block 与 inode 的大小 (block 为 1, 2, 4K ,inode 为 128Bytes 或 256Bytes);
filesystem 的挂载时间、最近一次写入数据的时间、最近一次检验磁盘 (fsck) 的时间等文件系统的相关信息;
一个 valid bit 数值,若此文件系统已被挂载,则 valid bit 为 0 ,若未被挂载,则 valid bit 为 1 。
记录着整个文件系统的信息，它坏了，整个文件系统就完蛋了。

此外,每个 block group 都可能含有 superblock 喔!但是我们也说一个文件系统应该仅有一个 superblock 而已,那是怎么
回事啊? 事实上除了第一个 block group 内会含有 superblock 之外,后续的 block group 不一定含有 superblock , 而若含有
superblock 则该 superblock 主要是做为第一个 block group 内 superblock 的备份咯,这样可以进行 superblock 的救援呢!



==== 查看super block的信息 ====
dumpe2fs  [-bh]  设备文件名

==== 查看可用的（格式化的）块设备 ====
blkid
