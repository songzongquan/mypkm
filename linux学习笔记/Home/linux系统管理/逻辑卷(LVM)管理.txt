Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-07-09T16:28:07+08:00

====== 逻辑卷管理(lvm) ======
Created 星期一 09 七月 2018

===== 概念 =====
实现磁盘空间可以动态的扩展. 之前需要加新硬盘,将分区,目录什么的连接到新的磁盘. 操作复杂不方便.不灵活.

 LVM 可以整合多个实体 partition 在一起， 让这些 partitions 看起来就像是一个磁盘一样！而
且，还可以在未来新增或移除其他的实体 partition 到这个 LVM 管理的磁盘当中

什 什么 么是 是 LVM： ： PV, PE, VG, LV 的 的意 意义 义

LVM 的全名是 Logical Volume Manager，中文可以翻译作逻辑卷轴管理员。之所以称为“卷轴”可能是因为可以将
filesystem 像卷轴一样伸长或缩短之故吧！LVM 的作法是将几个实体的 partitions （或 disk） 通过软件组合成为一块看起来是独立的
大磁盘 （VG） ，然后将这块大磁盘再经过分区成为可使用分区 （LV）， 最终就能够挂载使用了。但是为什么这样的系统可以进行
filesystem 的扩充或缩小呢？其实与一个称为 PE 的项目有关！ 

===== PV =====
Physical Volume  物理卷 它的名字其实就是分区名.
就是实际的分区或磁盘, 系统识别码要调成8e(即lvm)    --------gdisk    其实这一步也可以不改. 但建议是改.
并用pvcreate命令转换成成pv, 它是最底层的可分配资源.  系统分区识别码用gdisk可调.
相关命令:

 pvcreate ：将实体 partition 创建成为 PV ；
pvscan ：搜寻目前系统里面任何具有 PV 的磁盘；
pvdisplay ：显示出目前系统上面的 PV 状态；
pvremove ：将 PV 属性移除，让该 partition 不具有 PV 属性。


===== VG =====

Volume Group 卷组           -----      vgcreate  vgdisplay
就是很多pv组合起来,形成一个vg,  形成一个大的磁盘.  它的名字可以自定义.
相关命令:
vgcreate ：就是主要创建 VG 的指令啦！他的参数比较多，等一下介绍。
[**root@study ~]# vgcreate [-s N[mgt]] VG名称 PV名称**
**选项与参数：**
**-s ：后面接 PE 的大小 （size） ，单位可以是 m, g, t （大小写均可）**

vgscan ：搜寻系统上面是否有 VG 存在？
vgdisplay ：显示目前系统上面的 VG 状态；
vgextend ：在 VG 内增加额外的 PV ；
vgreduce ：在 VG 内移除 PV；
vgchange ：设置 VG 是否启动 （active）；
vgremove ：删除一个 VG 啊！

===== PE =====
Physical Extent,  物理区块 ,相当于描述pv大小的单位了. 是lvm中物理存储最小单位.      -
pv的大小用pe的多少计算 .相当于以前文件系统的block,它的大小会影响lvm的最大容量

===== LV =====
Logical Volum  逻辑卷         ---lvcreate lvdisplay 
表示在整个vg中切块, 相当于原来的分区,     lv是可以扩展和缩小的, 原理就是增加lv的pe数和减少pe数.
这个pe可以是一个pv中的也可以是多个pv中的.    它的设备名常是这样:
[[/dev/vgname/lvname]] 

LV划定后,用 mkfs进行格式化,就可以使用了. 以后还可以动态扩lv的大小,并不会影响数据的使用.

相关命令:

lvcreate ：创建 LV 啦！
lvscan ：查询系统上面的 LV ；
lvdisplay ：显示系统上面的 LV 状态啊！
lvextend ：在 LV 里面增加容量！
lvreduce ：在 LV 里面减少容量；
lvremove ：删除一个 LV ！
lvresize ：对 LV 进行容量大小的调整！

===== 写入方式 =====

依据写入机制的不同，而有两种方式：
1. 线性模式 （linear）：假如我将 /dev/vda1, /dev/vdb1 这两个 partition 加入到 VG 当中，并且整个 VG 只有一个 LV 时，那么所
谓的线性模式就是：当 /dev/vda1 的容量用完之后，/dev/vdb1 的硬盘才会被使用到， 这也是我们所建议的模式。
2. 交错模式 （triped）：那什么是交错模式？很简单啊，就是我将一笔数据拆成两部分，分别写入 /dev/vda1 与 /dev/vdb1 的意
思，感觉上有点像 RAID 0 啦！如此一来，一份数据用两颗硬盘来写入，理论上，读写的性能会比较好。

建议用1.  它主要是弹性扩容 的,并不是为了提高性能的.


===== 如何扩容 =====
1. VG 阶段需要有剩余的容量：因为需要放大文件系统，所以需要放大 LV，但是若没有多的 VG 容量， 那么更上层的 LV 与文件
系统就无法放大的。因此，你得要用尽各种方法来产生多的 VG 容量才行。一般来说，如果 VG 容量不足， 最简单的方法就是
再加硬盘！然后将该硬盘使用上面讲过的 pvcreate 及 vgextend 增加到该 VG 内即可！
2. LV 阶段产生更多的可用容量：如果 VG 的剩余容量足够了， 此时就可以利用 lvresize 这个指令来将剩余容量加入到所需要增
加的 LV 设备内！过程相当简单！
3. 文件系统阶段的放大：我们的 Linux 实际使用的其实不是 LV 啊！而是 LV 这个设备内的文件系统！ 所以一切最终还是要以文
件系统为依归！目前在 Linux 环境下，鸟哥测试过可以放大的文件系统有 XFS 以及 EXT 家族！ 至于缩小仅有 EXT 家族，目
前 XFS 文件系统并不支持文件系统的容量缩小喔！要注意！要注意！XFS 放大文件系统通过简单的 xfs_growfs 指令即可！

==== 以上三步都得做完,才能让文件系统真正的容量变大 ====

最后，请注意！目前的 XFS 文件系统中，并没有缩小文件系统容量的设计！也就是说，文件系统只能放大不能缩小喔！
如果你想要保有放大、缩小的本事， 那还请回去使用 EXT 家族最新的 EXT4 文件系统啰！XFS 目前是办不到的！
